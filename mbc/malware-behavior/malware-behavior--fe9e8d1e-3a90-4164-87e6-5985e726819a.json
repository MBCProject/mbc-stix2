{
    "type": "bundle",
    "id": "bundle--8e4fc022-cb88-441f-b73a-60aa55bfadea",
    "objects": [
        {
            "type": "malware-behavior",
            "spec_version": "2.1",
            "id": "malware-behavior--fe9e8d1e-3a90-4164-87e6-5985e726819a",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2019-08-01T00:00:00.000Z",
            "modified": "2023-09-13T00:00:00.000Z",
            "name": "Disassembler Evasion",
            "obj_defn": {
                "description": "Anti-disassembly techniques take advantage of weaknesses in either flow-oriented (also referred to as recursive) or linear disassembler algorithms, resulting in inaccurate or incomplete disassembly or the disassembly process halting with an error. Reportedly, the most common anti-disassembly technique is one that employs two consecutive conditional jump instructions (jz followed by jnz) that point to the same target address [1].",
                "external_id": "B0012",
                "source_name": "mitre-mbc",
                "url": "https://github.com/MBCProject/mbc-markdown/blob/main/anti-static-analysis/disassembler-evasion.md"
            },
            "tags": {
                "Anti-Analysis-Type": "Evasion"
            },
            "objective_refs": [
                "malware-objective--46f7c0d5-2fed-4daf-884f-fa7fd63e571b"
            ],
            "detection_rules": [
                {
                    "api_fncs": [
                        " "
                    ],
                    "detect_ref": "malware-behavior--fe9e8d1e-3a90-4164-87e6-5985e726819a",
                    "rule_name": "contain anti-disasm techniques",
                    "rule_type": "capa",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-disasm/contain-anti-disasm-techniques.yml"
                }
            ],
            "obj_version": "2.0",
            "external_references": [
                {
                    "source_name": "sikorski-book",
                    "description": "M. Sikorski and A. Honig, Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software, No Starch Press, 2012."
                },
                {
                    "source_name": "sikorski-antidisassembly",
                    "description": "M. Sikorski and A. Honig, \"Anti-Disassembly\" in Practical Malware Analysis, Sebastopol, CA, USA: No Starch Press, 2012, pp. 327-350.",
                    "url": "http://staff.ustc.edu.cn/~bjhua/courses/security/2014/readings/anti-disas.pdf"
                },
                {
                    "source_name": "branco",
                    "description": "R. Branco, G. Barbosa, P. Neto, \"Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti\u0002VM Technologies,\" Qualys-Vulnerability & Malware Research Labs (VMRL), 2012 [Online].",
                    "url": "https://www.kernelhacking.com/rodrigo/docs/blackhat2012-paper.pdf"
                },
                {
                    "source_name": "stevens-malvba",
                    "description": "D. Stevens, \"Malicious VBA Office Document Without Source Code,\" SANS Internet Storm Center, Apr. 4, 2023 [Online].",
                    "url": "https://isc.sans.edu/diary/Malicious+VBA+Office+Document+Without+Source+Code/24870"
                },
                {
                    "source_name": "doctorow",
                    "description": "C. Doctorow, \"Evil Clippy: a tool for making undetectable malicious Microsoft Office docs,\" Boing Boing, May 5, 2019 [Online].",
                    "url": "https://docs.microsoft.com/en-us/windows/win32/wininet/wininet-functions"
                },
                {
                    "source_name": "tung-heuristic",
                    "description": "Y. Tung and I. Harris, \"A Heuristic Approach to Detect Opaque Predicates that Disrupt Static Disassembly,\" Workshop on Binary Analysis Research 2020, San Diego, CA, Feb. 23, 2020 [Online].",
                    "url": "https://www.ndss-symposium.org/wp-content/uploads/2020/04/bar2020-23004-paper.pdf"
                },
                {
                    "source_name": "capa analysis",
                    "description": "Analysis output, capa 4.0, analyzed at MITRE on Oct. 12, 2022.",
                    "url": "https://github.com/mandiant/capa-rules"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "extensions": {
                "extension-definition--d57b7c9c-7fa6-436b-b82c-8e6f69cdc3d0": {
                    "extension_type": "new-sdo"
                }
            }
        }
    ]
}