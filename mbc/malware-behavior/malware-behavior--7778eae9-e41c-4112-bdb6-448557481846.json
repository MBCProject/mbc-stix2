{
    "type": "bundle",
    "id": "bundle--ae4647c8-9ccd-49f1-b661-d287ab9c7c53",
    "objects": [
        {
            "type": "malware-behavior",
            "spec_version": "2.1",
            "id": "malware-behavior--7778eae9-e41c-4112-bdb6-448557481846",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-10-13T00:00:00.000Z",
            "modified": "2023-09-13T00:00:00.000Z",
            "name": "Decrypt Data",
            "obj_defn": {
                "description": "Malware may decrypt data.",
                "external_id": "C0031",
                "source_name": "mitre-mbc",
                "url": "https://github.com/MBCProject/mbc-markdown/blob/main/micro-behaviors/cryptography/decrypt-data.md"
            },
            "objective_refs": [
                "malware-objective--aa176dc6-7969-4333-8b7b-677c92341818"
            ],
            "detection_rules": [
                {
                    "api_fncs": [
                        "CryptEncrypt",
                        "CryptDecrypt",
                        "CryptAcquireContext",
                        "CryptGenKey",
                        "CryptImportKey"
                    ],
                    "detect_ref": "malware-behavior--7778eae9-e41c-4112-bdb6-448557481846",
                    "rule_name": "encrypt or decrypt via WinCrypt",
                    "rule_type": "capa",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/data-manipulation/encryption/encrypt-or-decrypt-via-wincrypt.yml"
                },
                {
                    "api_fncs": [
                        " "
                    ],
                    "detect_ref": "malware-method--c5cb555e-a34c-4b15-8d8e-1698f8f933de",
                    "rule_name": "decrypt data using AES via x86 extensions",
                    "rule_type": "capa",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/data-manipulation/encryption/aes/decrypt-data-using-aes-via-x86-extensions.yml"
                }
            ],
            "snippets": [
                {
                    "exemplify_ref": "malware-behavior--7778eae9-e41c-4112-bdb6-448557481846",
                    "hash": "SHA256: c86cbf5e78c9f05ecfc11e4f2c147781cef77842a457e19ba690477eb564c22b",
                    "language": "asm",
                    "snippet": "push    ebx\nmov     ebx, [esp+4+arg_4]\npush    esi\nlea     eax, [ebx+20h]\npush    eax             ; unsigned int\ncall    ??2@YAPAXI@Z    ; operator new(uint)\nmov     ecx, [esp+0Ch+arg_C]\nmov     edx, eax\nadd     esp, 4\nmov     esi, [ecx]\nmov     [edx], esi\nmov     esi, [ecx+4]\nmov     [edx+4], esi\nmov     ecx, [ecx+8]\nmov     [edx+8], ecx\nmov     edx, [esp+8+arg_8]\ntest    ebx, ebx\nmov     [eax+0Ch], edx\njle     short loc_B\nmov     esi, [esp+8+arg_0]\npush    edi\nmov     edi, 0FFFFFFFDh\nlea     edx, [eax+3]\nsub     edi, eax\n\nloc_A:\nmov     cl, [edx-3]\nxor     cl, [edx+2]\nxor     cl, [edx-1]\nxor     cl, [edx]\nmov     [edx+0Dh], cl\nxor     [esi], cl\ninc     edx\ninc     esi\nlea     ecx, [edi+edx]\ncmp     ecx, ebx\njl      short loc_A\npop     edi\n\nloc_B:\npush    eax             ; void *\ncall    ??3@YAXPAX@Z    ; operator delete(void *)\nadd     esp, 4\nmov     eax, 1\npop     esi\npop     ebx\nretn\n"
                }
            ],
            "obj_version": "2.0",
            "external_references": [
                {
                    "source_name": "capa analysis",
                    "description": "Analysis output, capa 4.0, analyzed at MITRE on Oct. 12, 2022.",
                    "url": "https://github.com/mandiant/capa-rules"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "extensions": {
                "extension-definition--d57b7c9c-7fa6-436b-b82c-8e6f69cdc3d0": {
                    "extension_type": "new-sdo"
                }
            }
        }
    ]
}